/*
 * Copyright (c) Cloud Software Group, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1) Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *   2) Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Management.Automation;
using XenAPI;

namespace Citrix.XenServer.Commands
{
    [Cmdlet(VerbsCommon.Get, "Xen{{class_name}}Property", SupportsShouldProcess = false)]
    public class GetXen{{class_name}}Property : XenServerCmdlet
    {
        #region Cmdlet Parameters
        %s
        [Parameter(Mandatory = true)]
        public Xen{{class_name}}Property XenProperty { get; set; }

        #endregion

        #region Cmdlet Methods

        protected override void ProcessRecord()
        {
            GetSession();

            string {{class_name_local_var}} = Parse{{class_name}}();

            switch (XenProperty)
            {
{{#properties}}
                case Xen{{class_name}}Property.{{property}}:
                    ProcessRecord{{property}}({{class_name_local_var}});
                    break;
{{/properties}}
            }

            UpdateSessions();
        }

        #endregion

        #region Private Methods
{{#has_uuid}}

        private string Parse{{class_name}}()
        {
            string {{class_name_local_var}} = null;

            if ({{class_name}} != null)
                {{class_name_local_var}} = (new XenRef<XenAPI.{{class_name}}>({{class_name}})).opaque_ref;
            else if (Ref != null)
                {{class_name_local_var}} = Ref.opaque_ref;
            else
            {
                ThrowTerminatingError(new ErrorRecord(
                    new ArgumentException("At least one of the parameters '{{class_name}}', 'Ref' must be set"),
                    string.Empty,
                    ErrorCategory.InvalidArgument,
                    {{class_name}}));
            }

            return {{class_name_local_var}};
        }
{{/has_uuid}}
{{#properties}}

        private void ProcessRecord{{property}}({{#has_uuid}}string {{class_name_local_var}}{{/has_uuid}})
        {
            RunApiCall(()=>
            {
                {{{property_type}}} obj = XenAPI.{{class_name}}.{{message}}(session{{#property_params}}, {{param_name}}{{/property_params}});

                WriteObject(obj, true);
            });
        }
{{/properties}}
        #endregion
    }

    public enum Xen{{class_name}}Property
    {
{{#properties}}
        {{property}},
{{/properties}}
    }
}
